TODO:
    -> Camera Drivers 
        - C functions to configure OV7670 camera 
    -> Cam Capture 
        - Testbench for cam_capture_maxis.sv 
    -> VDMA Test 
        - Create test project with VDMA and Xilinx TPG 

__7/10__

The goal for today is to test the AXI stream IP that I 
build yesterday. There's not really a whole lot to *test*
seeing as it doesn't have any actual inputs. I just need to
build a model for the camera, add some self-checking 
elements, and monitor tuser, tend, and tvalid. 

Now that the AXI video capture has been verified, the next
big task is to integrate it into the pipeline. Here's an 
issue: the Digilent HDMI IP only supports 800x600 output 
resolution minimum. The OV7670 camera has a maximum
resolution of 640x480.

For now, I'm going to take some baby steps:
    1) Xilinx TPG w/ VDMA (TPG res = display res)
    2) Xilinx TPG w/ VDMA (TPG res < display res)

And *then* I'll figure out how to integrate the capture IP.
I still need to write drivers for camera configuration as 
well but that'll be something I can do to take a break from 
Xilinx block diagram finnagling.

__7/9__

I'm stupid. Xilinx offers two IP: 
    1) AXI IIC
    2) I2C Bus Master Controller
The Bus Master Controller requires a license. The AXI IIC 
does not. I never thought to look up IIC, only I2C. That makes 
life significantly easier at least. 

The only caveat is that IIC != SCCB. However, the differences 
are pretty minor. SCCB does not use open-drain drivers like 
i2c does, hence no pullups required. With i2c, SCL is 
bidirectional, in SCCB it is only driven by the master. It 
should be pretty trivial to convert.

Apart from writing drivers for camera configuration, I'm free 
to start my video capture camera IP. I'm going to base it off 
the video test pattern generator.


__7/2__

Need to make an i2c master IP.
    - I could get one from openCores.
    - Or I could make my own. 
    - Or pay for Xilinx IP. 
    
For a custom i2c master IP I would need:
    - input and output buffers
    - i2c master write functionality
    - i2c master read functionality
    - glue logic between i2c master and buffers
    - AXI slave interface
    - custom drivers 

Xilinx IP:
    Pros: 
        - almost guaranteed to work 
        - will come with drivers 
    Cons: 
        - have to pay 

Custom IP:
    Pros: 
        - learning experience 
    Cons:
        - lower performance
        - reliability not guaranteed (depends on time investment)

Open Source IP:
    Pros:
        - high likelihood it will work 
    Cons:
        - may have to write own drivers 

I will source an open-source IP. Maybe I will make my own IP in the future, but for 
now the goal of this project is to focus on the Embedded software aspect and learn 
to use VDMA.



