#ifndef IIC_MASTER_L_H
#define IIC_MASTER_L_H

/***************************** Include Files ********************************/
#include <stdio.h>
#include "xil_types.h"
#include "xil_assert.h"
#include "xil_io.h"

/************************** Constant Definitions ****************************/

/* i2c master register offsets */

#define I2C_STATUS_REG_OFFSET     0  /* Status Register, R/W */
#define I2C_CMD_REG_OFFSET        1
#define I2C_DATA_REG_OFFSET       2
#define I2C_PRESCALE_REG_OFFSET   3

/* Status Register bit positions */

#define I2C_RD_FULL               0x8000 /* read data FIFO full */
#define I2C_RD_EMPTY              0x4000 /* read data FIFO empty */
#define I2C_WR_OVF                0x2000 /* write data FIFO overflow; write 1 to clear */
#define I2C_WR_FULL               0x1000 /* write data FIFO full */
#define I2C_WR_EMPTY              0x800  /* write data FIFO empty */
#define I2C_CMD_OVF               0x400  /* command FIFO overflow; write 1 to clear */
#define I2C_CMD_FULL              0x200  /* command FIFO full */
#define I2C_CMD_EMPTY             0x100  /* command FIFO empty */
#define I2C_MISS_ACK              0x4    /* missed ACK from slave; write 1 to clear */
#define I2C_BUS_ACT               0x2    /* bus is active */
#define I2C_BUS_CONT              0x1    /* module has control of active bus */
#define I2C_BUSY                  0x0    /* i2c operation ongoing */

/* Command Register bit positions */
/*** all non-data bits push on command FIFO when written to! ***/

#define I2C_CMD_STOP             0x1000  /* set high to issue i2c stop condition */
#define I2C_CMD_WR_MULTIPLE      0x800   /* set high to start block write */
#define I2C_CMD_WR_EN            0x400   /* set high to start write */
#define I2C_CMD_RD_EN            0x200   /* set high to start read */
#define I2C_CMD_START            0x100   /* set high to issue i2c start condition */
#define I2C_CMD_ADDR_MASK        0x7F    /* mask for 7-bit i2c address */


/* Data Register bit positions */
/*** XIIC_DATA_LAST and XIIC_DATA_VALID must be accessed w/ atomic 16-bit reads/writes! ***/

#define I2C_DATA_LAST            0x200   /* indicates last byte of block write (write multiple) */
#define I2C_DATA_VALID           0x100   /* indicates valid read data */
#define I2C_DATA_MASK            0xFF    /* mask for 8-bit i2c data */



/* Prescale Register bit positions */

#define I2C_PRESCALE             0xFFFF  /* mask for 16-bit prescale value (input clk cycles) */



/***************** Macros (Base Operations) Definitions ********************/

#define I2C_WRITE_REG(BaseAddress, RegOffset, Data) \
        Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))

#define I2C_READ_REG(BaseAddress, RegOffset) \
	    XUartLite_In32((BaseAddress) + (RegOffset))

#define I2C_SET_CMD_REG(BaseAddress, Mask) \
	    I2C_WRITE_REG((BaseAddress), I2C_CMD_REG_OFFSET, (Mask))

#define I2C_SET_WRITE_REG(BaseAddress, Mask) \
	    I2C_WRITE_REG((BaseAddress), I2C_DATA_REG_OFFSET, (Mask))

#define I2C_SET_PRESCALE_REG(BaseAddress, Mask) \
	    I2C_WRITE_REG((BaseAddress), I2C_PRESCALE_REG_OFFSET, (Mask))

/***************** Macros (Register Checks) Definitions ********************/

/**
 * Check to see if there is data in the i2c receive buffer.
 * @param  BaseAddress is the base address of the device.
 * @return TRUE if the receiver is empty, FALSE if there is data present.
 */
#define I2c_IsReceiveEmpty(BaseAddress) \
	    ((XUartLite_GetStatusReg((BaseAddress)) & I2C_DATA_VALID) != 1)

/**
 * Check to see if the i2c write data buffer is full.
 * @param  BaseAddress is the base address of the device.
 * @return TRUE if the buffer is full, FALSE otherwise.
 */
#define I2c_IsTransmitFull(BaseAddress) \
	    ((XUartLite_GetStatusReg((BaseAddress)) & I2C_WR_FULL) != 1)

/**
 * Check to see if the i2c command buffer is full.
 * @param  BaseAddress is the base address of the device.
 * @return TRUE if the buffer is full, FALSE otherwise.
 */
#define I2c_IsCmdFull(BaseAddress) \
	    ((XUartLite_GetStatusReg((BaseAddress)) & I2C_CMD_FULL) != 1)


#endif
